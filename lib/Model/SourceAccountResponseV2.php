<?php
/**
 * SourceAccountResponseV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  VeloPayments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response.
 *
 * The version of the OpenAPI document: 2.16.18
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VeloPayments\Client\Model;

use \ArrayAccess;
use \VeloPayments\Client\ObjectSerializer;

/**
 * SourceAccountResponseV2 Class Doc Comment
 *
 * @category Class
 * @package  VeloPayments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SourceAccountResponseV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SourceAccountResponseV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'balance' => 'int',
        'currency' => 'string',
        'funding_ref' => 'string',
        'physical_account_name' => 'string',
        'rails_id' => 'string',
        'payor_id' => 'string',
        'name' => 'string',
        'pooled' => 'bool',
        'balance_visible' => 'bool',
        'customer_id' => 'string',
        'physical_account_id' => 'string',
        'notifications' => '\VeloPayments\Client\Model\Notifications',
        'funding_account_id' => 'string',
        'auto_top_up_config' => '\VeloPayments\Client\Model\AutoTopUpConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'balance' => 'int64',
        'currency' => null,
        'funding_ref' => null,
        'physical_account_name' => null,
        'rails_id' => null,
        'payor_id' => 'uuid',
        'name' => null,
        'pooled' => null,
        'balance_visible' => null,
        'customer_id' => null,
        'physical_account_id' => 'uuid',
        'notifications' => null,
        'funding_account_id' => 'uuid',
        'auto_top_up_config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'balance' => 'balance',
        'currency' => 'currency',
        'funding_ref' => 'fundingRef',
        'physical_account_name' => 'physicalAccountName',
        'rails_id' => 'railsId',
        'payor_id' => 'payorId',
        'name' => 'name',
        'pooled' => 'pooled',
        'balance_visible' => 'balanceVisible',
        'customer_id' => 'customerId',
        'physical_account_id' => 'physicalAccountId',
        'notifications' => 'notifications',
        'funding_account_id' => 'fundingAccountId',
        'auto_top_up_config' => 'autoTopUpConfig'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'balance' => 'setBalance',
        'currency' => 'setCurrency',
        'funding_ref' => 'setFundingRef',
        'physical_account_name' => 'setPhysicalAccountName',
        'rails_id' => 'setRailsId',
        'payor_id' => 'setPayorId',
        'name' => 'setName',
        'pooled' => 'setPooled',
        'balance_visible' => 'setBalanceVisible',
        'customer_id' => 'setCustomerId',
        'physical_account_id' => 'setPhysicalAccountId',
        'notifications' => 'setNotifications',
        'funding_account_id' => 'setFundingAccountId',
        'auto_top_up_config' => 'setAutoTopUpConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'balance' => 'getBalance',
        'currency' => 'getCurrency',
        'funding_ref' => 'getFundingRef',
        'physical_account_name' => 'getPhysicalAccountName',
        'rails_id' => 'getRailsId',
        'payor_id' => 'getPayorId',
        'name' => 'getName',
        'pooled' => 'getPooled',
        'balance_visible' => 'getBalanceVisible',
        'customer_id' => 'getCustomerId',
        'physical_account_id' => 'getPhysicalAccountId',
        'notifications' => 'getNotifications',
        'funding_account_id' => 'getFundingAccountId',
        'auto_top_up_config' => 'getAutoTopUpConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CURRENCY_USD = 'USD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['funding_ref'] = isset($data['funding_ref']) ? $data['funding_ref'] : null;
        $this->container['physical_account_name'] = isset($data['physical_account_name']) ? $data['physical_account_name'] : null;
        $this->container['rails_id'] = isset($data['rails_id']) ? $data['rails_id'] : null;
        $this->container['payor_id'] = isset($data['payor_id']) ? $data['payor_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pooled'] = isset($data['pooled']) ? $data['pooled'] : null;
        $this->container['balance_visible'] = isset($data['balance_visible']) ? $data['balance_visible'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['physical_account_id'] = isset($data['physical_account_id']) ? $data['physical_account_id'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['funding_account_id'] = isset($data['funding_account_id']) ? $data['funding_account_id'] : null;
        $this->container['auto_top_up_config'] = isset($data['auto_top_up_config']) ? $data['auto_top_up_config'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['funding_ref'] === null) {
            $invalidProperties[] = "'funding_ref' can't be null";
        }
        if ($this->container['physical_account_name'] === null) {
            $invalidProperties[] = "'physical_account_name' can't be null";
        }
        if ($this->container['rails_id'] === null) {
            $invalidProperties[] = "'rails_id' can't be null";
        }
        if ($this->container['pooled'] === null) {
            $invalidProperties[] = "'pooled' can't be null";
        }
        if ($this->container['balance_visible'] === null) {
            $invalidProperties[] = "'balance_visible' can't be null";
        }
        if ($this->container['auto_top_up_config'] === null) {
            $invalidProperties[] = "'auto_top_up_config' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Source Account Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance Decimal implied
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling SourceAccountResponseV2., must be smaller than or equal to 3.');
        }
        if (!is_null($currency) && (mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling SourceAccountResponseV2., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets funding_ref
     *
     * @return string
     */
    public function getFundingRef()
    {
        return $this->container['funding_ref'];
    }

    /**
     * Sets funding_ref
     *
     * @param string $funding_ref funding_ref
     *
     * @return $this
     */
    public function setFundingRef($funding_ref)
    {
        $this->container['funding_ref'] = $funding_ref;

        return $this;
    }

    /**
     * Gets physical_account_name
     *
     * @return string
     */
    public function getPhysicalAccountName()
    {
        return $this->container['physical_account_name'];
    }

    /**
     * Sets physical_account_name
     *
     * @param string $physical_account_name physical_account_name
     *
     * @return $this
     */
    public function setPhysicalAccountName($physical_account_name)
    {
        $this->container['physical_account_name'] = $physical_account_name;

        return $this;
    }

    /**
     * Gets rails_id
     *
     * @return string
     */
    public function getRailsId()
    {
        return $this->container['rails_id'];
    }

    /**
     * Sets rails_id
     *
     * @param string $rails_id rails_id
     *
     * @return $this
     */
    public function setRailsId($rails_id)
    {
        $this->container['rails_id'] = $rails_id;

        return $this;
    }

    /**
     * Gets payor_id
     *
     * @return string|null
     */
    public function getPayorId()
    {
        return $this->container['payor_id'];
    }

    /**
     * Sets payor_id
     *
     * @param string|null $payor_id payor_id
     *
     * @return $this
     */
    public function setPayorId($payor_id)
    {
        $this->container['payor_id'] = $payor_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pooled
     *
     * @return bool
     */
    public function getPooled()
    {
        return $this->container['pooled'];
    }

    /**
     * Sets pooled
     *
     * @param bool $pooled pooled
     *
     * @return $this
     */
    public function setPooled($pooled)
    {
        $this->container['pooled'] = $pooled;

        return $this;
    }

    /**
     * Gets balance_visible
     *
     * @return bool
     */
    public function getBalanceVisible()
    {
        return $this->container['balance_visible'];
    }

    /**
     * Sets balance_visible
     *
     * @param bool $balance_visible balance_visible
     *
     * @return $this
     */
    public function setBalanceVisible($balance_visible)
    {
        $this->container['balance_visible'] = $balance_visible;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets physical_account_id
     *
     * @return string|null
     */
    public function getPhysicalAccountId()
    {
        return $this->container['physical_account_id'];
    }

    /**
     * Sets physical_account_id
     *
     * @param string|null $physical_account_id physical_account_id
     *
     * @return $this
     */
    public function setPhysicalAccountId($physical_account_id)
    {
        $this->container['physical_account_id'] = $physical_account_id;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \VeloPayments\Client\Model\Notifications|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \VeloPayments\Client\Model\Notifications|null $notifications notifications
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets funding_account_id
     *
     * @return string|null
     */
    public function getFundingAccountId()
    {
        return $this->container['funding_account_id'];
    }

    /**
     * Sets funding_account_id
     *
     * @param string|null $funding_account_id funding_account_id
     *
     * @return $this
     */
    public function setFundingAccountId($funding_account_id)
    {
        $this->container['funding_account_id'] = $funding_account_id;

        return $this;
    }

    /**
     * Gets auto_top_up_config
     *
     * @return \VeloPayments\Client\Model\AutoTopUpConfig
     */
    public function getAutoTopUpConfig()
    {
        return $this->container['auto_top_up_config'];
    }

    /**
     * Sets auto_top_up_config
     *
     * @param \VeloPayments\Client\Model\AutoTopUpConfig $auto_top_up_config auto_top_up_config
     *
     * @return $this
     */
    public function setAutoTopUpConfig($auto_top_up_config)
    {
        $this->container['auto_top_up_config'] = $auto_top_up_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


