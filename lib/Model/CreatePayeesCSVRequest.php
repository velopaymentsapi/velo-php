<?php
/**
 * CreatePayeesCSVRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Velo Payments APIs
 *
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response.
 *
 * OpenAPI spec version: 2.10.61
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreatePayeesCSVRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreatePayeesCSVRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatePayeesCSVRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\OpenAPI\Client\Model\PayeeType',
        'remote_id' => 'string',
        'email' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'address_line4' => 'string',
        'address_city' => 'string',
        'address_county_or_province' => 'string',
        'address_zip_or_postcode' => 'string',
        'address_country' => 'string',
        'individual_title' => 'string',
        'individual_first_name' => 'string',
        'individual_other_names' => 'string',
        'individual_last_name' => 'string',
        'individual_national_identification' => 'string',
        'individual_date_of_birth' => '\DateTime',
        'company_name' => 'string',
        'company_tax_id' => 'string',
        'payment_channel_iban' => 'string',
        'payment_channel_account_number' => 'string',
        'payment_channel_routing_no' => 'string',
        'payment_channel_country_code' => 'string',
        'payment_channel_currency' => 'string',
        'payment_channel_account_name' => 'string',
        'challenge_value' => 'string',
        'challenge_description' => 'string',
        'payee_language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'remote_id' => null,
        'email' => 'email',
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'address_line4' => null,
        'address_city' => null,
        'address_county_or_province' => null,
        'address_zip_or_postcode' => null,
        'address_country' => null,
        'individual_title' => null,
        'individual_first_name' => null,
        'individual_other_names' => null,
        'individual_last_name' => null,
        'individual_national_identification' => null,
        'individual_date_of_birth' => 'date',
        'company_name' => null,
        'company_tax_id' => null,
        'payment_channel_iban' => null,
        'payment_channel_account_number' => null,
        'payment_channel_routing_no' => null,
        'payment_channel_country_code' => null,
        'payment_channel_currency' => null,
        'payment_channel_account_name' => null,
        'challenge_value' => null,
        'challenge_description' => null,
        'payee_language' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'remote_id' => 'remoteId',
        'email' => 'email',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_line3' => 'addressLine3',
        'address_line4' => 'addressLine4',
        'address_city' => 'addressCity',
        'address_county_or_province' => 'addressCountyOrProvince',
        'address_zip_or_postcode' => 'addressZipOrPostcode',
        'address_country' => 'addressCountry',
        'individual_title' => 'individualTitle',
        'individual_first_name' => 'individualFirstName',
        'individual_other_names' => 'individualOtherNames',
        'individual_last_name' => 'individualLastName',
        'individual_national_identification' => 'individualNationalIdentification',
        'individual_date_of_birth' => 'individualDateOfBirth',
        'company_name' => 'companyName',
        'company_tax_id' => 'companyTaxId',
        'payment_channel_iban' => 'paymentChannelIban',
        'payment_channel_account_number' => 'paymentChannelAccountNumber',
        'payment_channel_routing_no' => 'paymentChannelRoutingNo',
        'payment_channel_country_code' => 'paymentChannelCountryCode',
        'payment_channel_currency' => 'paymentChannelCurrency',
        'payment_channel_account_name' => 'paymentChannelAccountName',
        'challenge_value' => 'challengeValue',
        'challenge_description' => 'challengeDescription',
        'payee_language' => 'payeeLanguage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'remote_id' => 'setRemoteId',
        'email' => 'setEmail',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'address_line4' => 'setAddressLine4',
        'address_city' => 'setAddressCity',
        'address_county_or_province' => 'setAddressCountyOrProvince',
        'address_zip_or_postcode' => 'setAddressZipOrPostcode',
        'address_country' => 'setAddressCountry',
        'individual_title' => 'setIndividualTitle',
        'individual_first_name' => 'setIndividualFirstName',
        'individual_other_names' => 'setIndividualOtherNames',
        'individual_last_name' => 'setIndividualLastName',
        'individual_national_identification' => 'setIndividualNationalIdentification',
        'individual_date_of_birth' => 'setIndividualDateOfBirth',
        'company_name' => 'setCompanyName',
        'company_tax_id' => 'setCompanyTaxId',
        'payment_channel_iban' => 'setPaymentChannelIban',
        'payment_channel_account_number' => 'setPaymentChannelAccountNumber',
        'payment_channel_routing_no' => 'setPaymentChannelRoutingNo',
        'payment_channel_country_code' => 'setPaymentChannelCountryCode',
        'payment_channel_currency' => 'setPaymentChannelCurrency',
        'payment_channel_account_name' => 'setPaymentChannelAccountName',
        'challenge_value' => 'setChallengeValue',
        'challenge_description' => 'setChallengeDescription',
        'payee_language' => 'setPayeeLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'remote_id' => 'getRemoteId',
        'email' => 'getEmail',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'address_line4' => 'getAddressLine4',
        'address_city' => 'getAddressCity',
        'address_county_or_province' => 'getAddressCountyOrProvince',
        'address_zip_or_postcode' => 'getAddressZipOrPostcode',
        'address_country' => 'getAddressCountry',
        'individual_title' => 'getIndividualTitle',
        'individual_first_name' => 'getIndividualFirstName',
        'individual_other_names' => 'getIndividualOtherNames',
        'individual_last_name' => 'getIndividualLastName',
        'individual_national_identification' => 'getIndividualNationalIdentification',
        'individual_date_of_birth' => 'getIndividualDateOfBirth',
        'company_name' => 'getCompanyName',
        'company_tax_id' => 'getCompanyTaxId',
        'payment_channel_iban' => 'getPaymentChannelIban',
        'payment_channel_account_number' => 'getPaymentChannelAccountNumber',
        'payment_channel_routing_no' => 'getPaymentChannelRoutingNo',
        'payment_channel_country_code' => 'getPaymentChannelCountryCode',
        'payment_channel_currency' => 'getPaymentChannelCurrency',
        'payment_channel_account_name' => 'getPaymentChannelAccountName',
        'challenge_value' => 'getChallengeValue',
        'challenge_description' => 'getChallengeDescription',
        'payee_language' => 'getPayeeLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAYMENT_CHANNEL_CURRENCY_USD = 'USD';
    const PAYMENT_CHANNEL_CURRENCY_GBP = 'GBP';
    const PAYMENT_CHANNEL_CURRENCY_EUR = 'EUR';
    const PAYEE_LANGUAGE_AR = 'AR';
    const PAYEE_LANGUAGE_EN = 'EN';
    const PAYEE_LANGUAGE_ES = 'ES';
    const PAYEE_LANGUAGE_FR = 'FR';
    const PAYEE_LANGUAGE_HE = 'HE';
    const PAYEE_LANGUAGE_HI = 'HI';
    const PAYEE_LANGUAGE_JA = 'JA';
    const PAYEE_LANGUAGE_PT = 'PT';
    const PAYEE_LANGUAGE_RU = 'RU';
    const PAYEE_LANGUAGE_UR = 'UR';
    const PAYEE_LANGUAGE_ZH = 'ZH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentChannelCurrencyAllowableValues()
    {
        return [
            self::PAYMENT_CHANNEL_CURRENCY_USD,
            self::PAYMENT_CHANNEL_CURRENCY_GBP,
            self::PAYMENT_CHANNEL_CURRENCY_EUR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayeeLanguageAllowableValues()
    {
        return [
            self::PAYEE_LANGUAGE_AR,
            self::PAYEE_LANGUAGE_EN,
            self::PAYEE_LANGUAGE_ES,
            self::PAYEE_LANGUAGE_FR,
            self::PAYEE_LANGUAGE_HE,
            self::PAYEE_LANGUAGE_HI,
            self::PAYEE_LANGUAGE_JA,
            self::PAYEE_LANGUAGE_PT,
            self::PAYEE_LANGUAGE_RU,
            self::PAYEE_LANGUAGE_UR,
            self::PAYEE_LANGUAGE_ZH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['remote_id'] = isset($data['remote_id']) ? $data['remote_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['address_line3'] = isset($data['address_line3']) ? $data['address_line3'] : null;
        $this->container['address_line4'] = isset($data['address_line4']) ? $data['address_line4'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_county_or_province'] = isset($data['address_county_or_province']) ? $data['address_county_or_province'] : null;
        $this->container['address_zip_or_postcode'] = isset($data['address_zip_or_postcode']) ? $data['address_zip_or_postcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['individual_title'] = isset($data['individual_title']) ? $data['individual_title'] : null;
        $this->container['individual_first_name'] = isset($data['individual_first_name']) ? $data['individual_first_name'] : null;
        $this->container['individual_other_names'] = isset($data['individual_other_names']) ? $data['individual_other_names'] : null;
        $this->container['individual_last_name'] = isset($data['individual_last_name']) ? $data['individual_last_name'] : null;
        $this->container['individual_national_identification'] = isset($data['individual_national_identification']) ? $data['individual_national_identification'] : null;
        $this->container['individual_date_of_birth'] = isset($data['individual_date_of_birth']) ? $data['individual_date_of_birth'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_tax_id'] = isset($data['company_tax_id']) ? $data['company_tax_id'] : null;
        $this->container['payment_channel_iban'] = isset($data['payment_channel_iban']) ? $data['payment_channel_iban'] : null;
        $this->container['payment_channel_account_number'] = isset($data['payment_channel_account_number']) ? $data['payment_channel_account_number'] : null;
        $this->container['payment_channel_routing_no'] = isset($data['payment_channel_routing_no']) ? $data['payment_channel_routing_no'] : null;
        $this->container['payment_channel_country_code'] = isset($data['payment_channel_country_code']) ? $data['payment_channel_country_code'] : null;
        $this->container['payment_channel_currency'] = isset($data['payment_channel_currency']) ? $data['payment_channel_currency'] : null;
        $this->container['payment_channel_account_name'] = isset($data['payment_channel_account_name']) ? $data['payment_channel_account_name'] : null;
        $this->container['challenge_value'] = isset($data['challenge_value']) ? $data['challenge_value'] : null;
        $this->container['challenge_description'] = isset($data['challenge_description']) ? $data['challenge_description'] : null;
        $this->container['payee_language'] = isset($data['payee_language']) ? $data['payee_language'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['remote_id'] === null) {
            $invalidProperties[] = "'remote_id' can't be null";
        }
        if ((mb_strlen($this->container['remote_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'remote_id', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['remote_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'remote_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['address_line1'] === null) {
            $invalidProperties[] = "'address_line1' can't be null";
        }
        if ((mb_strlen($this->container['address_line1']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['address_line1']) < 2)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line3']) && (mb_strlen($this->container['address_line3']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_line3', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_line3']) && (mb_strlen($this->container['address_line3']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line4']) && (mb_strlen($this->container['address_line4']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_line4', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_line4']) && (mb_strlen($this->container['address_line4']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line4', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['address_city'] === null) {
            $invalidProperties[] = "'address_city' can't be null";
        }
        if ((mb_strlen($this->container['address_city']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['address_city']) < 2)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['address_county_or_province']) && (mb_strlen($this->container['address_county_or_province']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_county_or_province', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address_county_or_province']) && (mb_strlen($this->container['address_county_or_province']) < 2)) {
            $invalidProperties[] = "invalid value for 'address_county_or_province', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['address_zip_or_postcode'] === null) {
            $invalidProperties[] = "'address_zip_or_postcode' can't be null";
        }
        if ((mb_strlen($this->container['address_zip_or_postcode']) > 30)) {
            $invalidProperties[] = "invalid value for 'address_zip_or_postcode', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['address_zip_or_postcode']) < 2)) {
            $invalidProperties[] = "invalid value for 'address_zip_or_postcode', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['address_country'] === null) {
            $invalidProperties[] = "'address_country' can't be null";
        }
        if ((mb_strlen($this->container['address_country']) > 50)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['address_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['individual_title']) && (mb_strlen($this->container['individual_title']) > 10)) {
            $invalidProperties[] = "invalid value for 'individual_title', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['individual_title']) && (mb_strlen($this->container['individual_title']) < 1)) {
            $invalidProperties[] = "invalid value for 'individual_title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['individual_first_name']) && (mb_strlen($this->container['individual_first_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'individual_first_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['individual_first_name']) && (mb_strlen($this->container['individual_first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'individual_first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['individual_other_names']) && (mb_strlen($this->container['individual_other_names']) > 40)) {
            $invalidProperties[] = "invalid value for 'individual_other_names', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['individual_other_names']) && (mb_strlen($this->container['individual_other_names']) < 1)) {
            $invalidProperties[] = "invalid value for 'individual_other_names', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['individual_last_name']) && (mb_strlen($this->container['individual_last_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'individual_last_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['individual_last_name']) && (mb_strlen($this->container['individual_last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'individual_last_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company_tax_id']) && !preg_match("/[\\\\d]{9}/", $this->container['company_tax_id'])) {
            $invalidProperties[] = "invalid value for 'company_tax_id', must be conform to the pattern /[\\\\d]{9}/.";
        }

        if (!is_null($this->container['payment_channel_iban']) && (mb_strlen($this->container['payment_channel_iban']) > 34)) {
            $invalidProperties[] = "invalid value for 'payment_channel_iban', the character length must be smaller than or equal to 34.";
        }

        if (!is_null($this->container['payment_channel_iban']) && (mb_strlen($this->container['payment_channel_iban']) < 15)) {
            $invalidProperties[] = "invalid value for 'payment_channel_iban', the character length must be bigger than or equal to 15.";
        }

        if (!is_null($this->container['payment_channel_iban']) && !preg_match("/^[A-Za-z0-9]+$/", $this->container['payment_channel_iban'])) {
            $invalidProperties[] = "invalid value for 'payment_channel_iban', must be conform to the pattern /^[A-Za-z0-9]+$/.";
        }

        if (!is_null($this->container['payment_channel_account_number']) && (mb_strlen($this->container['payment_channel_account_number']) > 17)) {
            $invalidProperties[] = "invalid value for 'payment_channel_account_number', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['payment_channel_account_number']) && (mb_strlen($this->container['payment_channel_account_number']) < 6)) {
            $invalidProperties[] = "invalid value for 'payment_channel_account_number', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['payment_channel_routing_no']) && (mb_strlen($this->container['payment_channel_routing_no']) > 9)) {
            $invalidProperties[] = "invalid value for 'payment_channel_routing_no', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['payment_channel_routing_no']) && (mb_strlen($this->container['payment_channel_routing_no']) < 9)) {
            $invalidProperties[] = "invalid value for 'payment_channel_routing_no', the character length must be bigger than or equal to 9.";
        }

        if (!is_null($this->container['payment_channel_country_code']) && (mb_strlen($this->container['payment_channel_country_code']) > 9)) {
            $invalidProperties[] = "invalid value for 'payment_channel_country_code', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['payment_channel_country_code']) && (mb_strlen($this->container['payment_channel_country_code']) < 9)) {
            $invalidProperties[] = "invalid value for 'payment_channel_country_code', the character length must be bigger than or equal to 9.";
        }

        $allowedValues = $this->getPaymentChannelCurrencyAllowableValues();
        if (!is_null($this->container['payment_channel_currency']) && !in_array($this->container['payment_channel_currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_channel_currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['challenge_value']) && (mb_strlen($this->container['challenge_value']) > 20)) {
            $invalidProperties[] = "invalid value for 'challenge_value', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['challenge_value']) && (mb_strlen($this->container['challenge_value']) < 3)) {
            $invalidProperties[] = "invalid value for 'challenge_value', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['challenge_description']) && (mb_strlen($this->container['challenge_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'challenge_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['challenge_description']) && (mb_strlen($this->container['challenge_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'challenge_description', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPayeeLanguageAllowableValues();
        if (!is_null($this->container['payee_language']) && !in_array($this->container['payee_language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payee_language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\PayeeType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\PayeeType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string $remote_id remote_id
     *
     * @return $this
     */
    public function setRemoteId($remote_id)
    {
        if ((mb_strlen($remote_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $remote_id when calling CreatePayeesCSVRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($remote_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $remote_id when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 address_line1
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if ((mb_strlen($address_line1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling CreatePayeesCSVRequest., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($address_line1) < 2)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling CreatePayeesCSVRequest., must be bigger than or equal to 2.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 address_line2
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (mb_strlen($address_line2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling CreatePayeesCSVRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($address_line2) && (mb_strlen($address_line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling CreatePayeesCSVRequest., must be bigger than or equal to 0.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param string|null $address_line3 address_line3
     *
     * @return $this
     */
    public function setAddressLine3($address_line3)
    {
        if (!is_null($address_line3) && (mb_strlen($address_line3) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_line3 when calling CreatePayeesCSVRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($address_line3) && (mb_strlen($address_line3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line3 when calling CreatePayeesCSVRequest., must be bigger than or equal to 0.');
        }

        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets address_line4
     *
     * @return string|null
     */
    public function getAddressLine4()
    {
        return $this->container['address_line4'];
    }

    /**
     * Sets address_line4
     *
     * @param string|null $address_line4 address_line4
     *
     * @return $this
     */
    public function setAddressLine4($address_line4)
    {
        if (!is_null($address_line4) && (mb_strlen($address_line4) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_line4 when calling CreatePayeesCSVRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($address_line4) && (mb_strlen($address_line4) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line4 when calling CreatePayeesCSVRequest., must be bigger than or equal to 0.');
        }

        $this->container['address_line4'] = $address_line4;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        if ((mb_strlen($address_city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling CreatePayeesCSVRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($address_city) < 2)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling CreatePayeesCSVRequest., must be bigger than or equal to 2.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_county_or_province
     *
     * @return string|null
     */
    public function getAddressCountyOrProvince()
    {
        return $this->container['address_county_or_province'];
    }

    /**
     * Sets address_county_or_province
     *
     * @param string|null $address_county_or_province address_county_or_province
     *
     * @return $this
     */
    public function setAddressCountyOrProvince($address_county_or_province)
    {
        if (!is_null($address_county_or_province) && (mb_strlen($address_county_or_province) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_county_or_province when calling CreatePayeesCSVRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($address_county_or_province) && (mb_strlen($address_county_or_province) < 2)) {
            throw new \InvalidArgumentException('invalid length for $address_county_or_province when calling CreatePayeesCSVRequest., must be bigger than or equal to 2.');
        }

        $this->container['address_county_or_province'] = $address_county_or_province;

        return $this;
    }

    /**
     * Gets address_zip_or_postcode
     *
     * @return string
     */
    public function getAddressZipOrPostcode()
    {
        return $this->container['address_zip_or_postcode'];
    }

    /**
     * Sets address_zip_or_postcode
     *
     * @param string $address_zip_or_postcode address_zip_or_postcode
     *
     * @return $this
     */
    public function setAddressZipOrPostcode($address_zip_or_postcode)
    {
        if ((mb_strlen($address_zip_or_postcode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $address_zip_or_postcode when calling CreatePayeesCSVRequest., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($address_zip_or_postcode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $address_zip_or_postcode when calling CreatePayeesCSVRequest., must be bigger than or equal to 2.');
        }

        $this->container['address_zip_or_postcode'] = $address_zip_or_postcode;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        if ((mb_strlen($address_country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling CreatePayeesCSVRequest., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($address_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling CreatePayeesCSVRequest., must be bigger than or equal to 2.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets individual_title
     *
     * @return string|null
     */
    public function getIndividualTitle()
    {
        return $this->container['individual_title'];
    }

    /**
     * Sets individual_title
     *
     * @param string|null $individual_title individual_title
     *
     * @return $this
     */
    public function setIndividualTitle($individual_title)
    {
        if (!is_null($individual_title) && (mb_strlen($individual_title) > 10)) {
            throw new \InvalidArgumentException('invalid length for $individual_title when calling CreatePayeesCSVRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($individual_title) && (mb_strlen($individual_title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $individual_title when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['individual_title'] = $individual_title;

        return $this;
    }

    /**
     * Gets individual_first_name
     *
     * @return string|null
     */
    public function getIndividualFirstName()
    {
        return $this->container['individual_first_name'];
    }

    /**
     * Sets individual_first_name
     *
     * @param string|null $individual_first_name individual_first_name
     *
     * @return $this
     */
    public function setIndividualFirstName($individual_first_name)
    {
        if (!is_null($individual_first_name) && (mb_strlen($individual_first_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $individual_first_name when calling CreatePayeesCSVRequest., must be smaller than or equal to 40.');
        }
        if (!is_null($individual_first_name) && (mb_strlen($individual_first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $individual_first_name when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['individual_first_name'] = $individual_first_name;

        return $this;
    }

    /**
     * Gets individual_other_names
     *
     * @return string|null
     */
    public function getIndividualOtherNames()
    {
        return $this->container['individual_other_names'];
    }

    /**
     * Sets individual_other_names
     *
     * @param string|null $individual_other_names individual_other_names
     *
     * @return $this
     */
    public function setIndividualOtherNames($individual_other_names)
    {
        if (!is_null($individual_other_names) && (mb_strlen($individual_other_names) > 40)) {
            throw new \InvalidArgumentException('invalid length for $individual_other_names when calling CreatePayeesCSVRequest., must be smaller than or equal to 40.');
        }
        if (!is_null($individual_other_names) && (mb_strlen($individual_other_names) < 1)) {
            throw new \InvalidArgumentException('invalid length for $individual_other_names when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['individual_other_names'] = $individual_other_names;

        return $this;
    }

    /**
     * Gets individual_last_name
     *
     * @return string|null
     */
    public function getIndividualLastName()
    {
        return $this->container['individual_last_name'];
    }

    /**
     * Sets individual_last_name
     *
     * @param string|null $individual_last_name individual_last_name
     *
     * @return $this
     */
    public function setIndividualLastName($individual_last_name)
    {
        if (!is_null($individual_last_name) && (mb_strlen($individual_last_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $individual_last_name when calling CreatePayeesCSVRequest., must be smaller than or equal to 40.');
        }
        if (!is_null($individual_last_name) && (mb_strlen($individual_last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $individual_last_name when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['individual_last_name'] = $individual_last_name;

        return $this;
    }

    /**
     * Gets individual_national_identification
     *
     * @return string|null
     */
    public function getIndividualNationalIdentification()
    {
        return $this->container['individual_national_identification'];
    }

    /**
     * Sets individual_national_identification
     *
     * @param string|null $individual_national_identification individual_national_identification
     *
     * @return $this
     */
    public function setIndividualNationalIdentification($individual_national_identification)
    {
        $this->container['individual_national_identification'] = $individual_national_identification;

        return $this;
    }

    /**
     * Gets individual_date_of_birth
     *
     * @return \DateTime|null
     */
    public function getIndividualDateOfBirth()
    {
        return $this->container['individual_date_of_birth'];
    }

    /**
     * Sets individual_date_of_birth
     *
     * @param \DateTime|null $individual_date_of_birth example - 1970-05-20
     *
     * @return $this
     */
    public function setIndividualDateOfBirth($individual_date_of_birth)
    {
        $this->container['individual_date_of_birth'] = $individual_date_of_birth;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        if (!is_null($company_name) && (mb_strlen($company_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling CreatePayeesCSVRequest., must be smaller than or equal to 40.');
        }
        if (!is_null($company_name) && (mb_strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_tax_id
     *
     * @return string|null
     */
    public function getCompanyTaxId()
    {
        return $this->container['company_tax_id'];
    }

    /**
     * Sets company_tax_id
     *
     * @param string|null $company_tax_id Company Tax Id (EIN) must be 9 numeric characters. Must match the regular expression ```[\\d]{9}```.
     *
     * @return $this
     */
    public function setCompanyTaxId($company_tax_id)
    {

        if (!is_null($company_tax_id) && (!preg_match("/[\\\\d]{9}/", $company_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $company_tax_id when calling CreatePayeesCSVRequest., must conform to the pattern /[\\\\d]{9}/.");
        }

        $this->container['company_tax_id'] = $company_tax_id;

        return $this;
    }

    /**
     * Gets payment_channel_iban
     *
     * @return string|null
     */
    public function getPaymentChannelIban()
    {
        return $this->container['payment_channel_iban'];
    }

    /**
     * Sets payment_channel_iban
     *
     * @param string|null $payment_channel_iban Must match the regular expression ```^[A-Za-z0-9]+$```.
     *
     * @return $this
     */
    public function setPaymentChannelIban($payment_channel_iban)
    {
        if (!is_null($payment_channel_iban) && (mb_strlen($payment_channel_iban) > 34)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_iban when calling CreatePayeesCSVRequest., must be smaller than or equal to 34.');
        }
        if (!is_null($payment_channel_iban) && (mb_strlen($payment_channel_iban) < 15)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_iban when calling CreatePayeesCSVRequest., must be bigger than or equal to 15.');
        }
        if (!is_null($payment_channel_iban) && (!preg_match("/^[A-Za-z0-9]+$/", $payment_channel_iban))) {
            throw new \InvalidArgumentException("invalid value for $payment_channel_iban when calling CreatePayeesCSVRequest., must conform to the pattern /^[A-Za-z0-9]+$/.");
        }

        $this->container['payment_channel_iban'] = $payment_channel_iban;

        return $this;
    }

    /**
     * Gets payment_channel_account_number
     *
     * @return string|null
     */
    public function getPaymentChannelAccountNumber()
    {
        return $this->container['payment_channel_account_number'];
    }

    /**
     * Sets payment_channel_account_number
     *
     * @param string|null $payment_channel_account_number payment_channel_account_number
     *
     * @return $this
     */
    public function setPaymentChannelAccountNumber($payment_channel_account_number)
    {
        if (!is_null($payment_channel_account_number) && (mb_strlen($payment_channel_account_number) > 17)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_account_number when calling CreatePayeesCSVRequest., must be smaller than or equal to 17.');
        }
        if (!is_null($payment_channel_account_number) && (mb_strlen($payment_channel_account_number) < 6)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_account_number when calling CreatePayeesCSVRequest., must be bigger than or equal to 6.');
        }

        $this->container['payment_channel_account_number'] = $payment_channel_account_number;

        return $this;
    }

    /**
     * Gets payment_channel_routing_no
     *
     * @return string|null
     */
    public function getPaymentChannelRoutingNo()
    {
        return $this->container['payment_channel_routing_no'];
    }

    /**
     * Sets payment_channel_routing_no
     *
     * @param string|null $payment_channel_routing_no payment_channel_routing_no
     *
     * @return $this
     */
    public function setPaymentChannelRoutingNo($payment_channel_routing_no)
    {
        if (!is_null($payment_channel_routing_no) && (mb_strlen($payment_channel_routing_no) > 9)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_routing_no when calling CreatePayeesCSVRequest., must be smaller than or equal to 9.');
        }
        if (!is_null($payment_channel_routing_no) && (mb_strlen($payment_channel_routing_no) < 9)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_routing_no when calling CreatePayeesCSVRequest., must be bigger than or equal to 9.');
        }

        $this->container['payment_channel_routing_no'] = $payment_channel_routing_no;

        return $this;
    }

    /**
     * Gets payment_channel_country_code
     *
     * @return string|null
     */
    public function getPaymentChannelCountryCode()
    {
        return $this->container['payment_channel_country_code'];
    }

    /**
     * Sets payment_channel_country_code
     *
     * @param string|null $payment_channel_country_code Must be a 3 character currency code. ISO 4217
     *
     * @return $this
     */
    public function setPaymentChannelCountryCode($payment_channel_country_code)
    {
        if (!is_null($payment_channel_country_code) && (mb_strlen($payment_channel_country_code) > 9)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_country_code when calling CreatePayeesCSVRequest., must be smaller than or equal to 9.');
        }
        if (!is_null($payment_channel_country_code) && (mb_strlen($payment_channel_country_code) < 9)) {
            throw new \InvalidArgumentException('invalid length for $payment_channel_country_code when calling CreatePayeesCSVRequest., must be bigger than or equal to 9.');
        }

        $this->container['payment_channel_country_code'] = $payment_channel_country_code;

        return $this;
    }

    /**
     * Gets payment_channel_currency
     *
     * @return string|null
     */
    public function getPaymentChannelCurrency()
    {
        return $this->container['payment_channel_currency'];
    }

    /**
     * Sets payment_channel_currency
     *
     * @param string|null $payment_channel_currency payment_channel_currency
     *
     * @return $this
     */
    public function setPaymentChannelCurrency($payment_channel_currency)
    {
        $allowedValues = $this->getPaymentChannelCurrencyAllowableValues();
        if (!is_null($payment_channel_currency) && !in_array($payment_channel_currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_channel_currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_channel_currency'] = $payment_channel_currency;

        return $this;
    }

    /**
     * Gets payment_channel_account_name
     *
     * @return string|null
     */
    public function getPaymentChannelAccountName()
    {
        return $this->container['payment_channel_account_name'];
    }

    /**
     * Sets payment_channel_account_name
     *
     * @param string|null $payment_channel_account_name payment_channel_account_name
     *
     * @return $this
     */
    public function setPaymentChannelAccountName($payment_channel_account_name)
    {
        $this->container['payment_channel_account_name'] = $payment_channel_account_name;

        return $this;
    }

    /**
     * Gets challenge_value
     *
     * @return string|null
     */
    public function getChallengeValue()
    {
        return $this->container['challenge_value'];
    }

    /**
     * Sets challenge_value
     *
     * @param string|null $challenge_value challenge_value
     *
     * @return $this
     */
    public function setChallengeValue($challenge_value)
    {
        if (!is_null($challenge_value) && (mb_strlen($challenge_value) > 20)) {
            throw new \InvalidArgumentException('invalid length for $challenge_value when calling CreatePayeesCSVRequest., must be smaller than or equal to 20.');
        }
        if (!is_null($challenge_value) && (mb_strlen($challenge_value) < 3)) {
            throw new \InvalidArgumentException('invalid length for $challenge_value when calling CreatePayeesCSVRequest., must be bigger than or equal to 3.');
        }

        $this->container['challenge_value'] = $challenge_value;

        return $this;
    }

    /**
     * Gets challenge_description
     *
     * @return string|null
     */
    public function getChallengeDescription()
    {
        return $this->container['challenge_description'];
    }

    /**
     * Sets challenge_description
     *
     * @param string|null $challenge_description challenge_description
     *
     * @return $this
     */
    public function setChallengeDescription($challenge_description)
    {
        if (!is_null($challenge_description) && (mb_strlen($challenge_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $challenge_description when calling CreatePayeesCSVRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($challenge_description) && (mb_strlen($challenge_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $challenge_description when calling CreatePayeesCSVRequest., must be bigger than or equal to 1.');
        }

        $this->container['challenge_description'] = $challenge_description;

        return $this;
    }

    /**
     * Gets payee_language
     *
     * @return string|null
     */
    public function getPayeeLanguage()
    {
        return $this->container['payee_language'];
    }

    /**
     * Sets payee_language
     *
     * @param string|null $payee_language payee_language
     *
     * @return $this
     */
    public function setPayeeLanguage($payee_language)
    {
        $allowedValues = $this->getPayeeLanguageAllowableValues();
        if (!is_null($payee_language) && !in_array($payee_language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payee_language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payee_language'] = $payee_language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


